name: Claude Code Review

on:
  pull_request:
    types: [opened, synchronize, ready_for_review]
    # Optional: Only run on specific file changes
    # paths:
    #   - "src/**/*.ts"
    #   - "src/**/*.tsx"
    #   - "src/**/*.js"
    #   - "src/**/*.jsx"

jobs:
  claude-review:
    # Only run for shekohex user and non-draft PRs
    if: |
      github.actor == 'shekohex' && 
      github.event.pull_request.draft == false

    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2

      - name: Run Claude Code Review
        id: claude-review
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4.1)
          # model: "claude-opus-4-1-20250805"

          # Direct prompt for automated review (no @claude mention needed)
          direct_prompt: |
            CRITICAL: First, check if this PR has a linked issue or references a task. If it does:
            1. Read and understand the original requirements from the linked issue/task
            2. Verify that the implementation matches the intended goal
            3. Check if all acceptance criteria are met

            Review this pull request comprehensively:

            1. REQUIREMENTS VALIDATION:
               - Does the implementation solve the problem described in the linked issue?
               - Are all requirements from the original task addressed?
               - Are there any missing features or edge cases?

            2. CODE QUALITY & STANDARDS:
               - Follow all rules defined in .claude/CLAUDE.md strictly
               - Check for strict type safety (no any types, proper TypeScript usage)
               - Verify accessibility (a11y) compliance
               - Ensure SOLID principles are followed
               - Check that code follows Conventional Commits format if applicable

            3. TECHNICAL REVIEW:
               - Identify potential bugs or logic errors
               - Review performance implications
               - Check for security vulnerabilities
               - Verify error handling and edge cases
               - Review architectural decisions

            4. TESTING:
               - Verify test coverage for new functionality
               - Check if tests cover edge cases
               - Ensure tests are meaningful and not just for coverage

            5. PROJECT CONSISTENCY:
               - Verify code follows existing patterns in the codebase
               - Check that no unnecessary files were created
               - Ensure no unnecessary comments or emojis were added

            Be constructive, specific, and actionable in your feedback. 
            If something needs improvement, explain why and suggest how to fix it.
            Acknowledge good practices when you see them.

          # Use sticky comments to make Claude reuse the same comment on subsequent pushes to the same PR
          use_sticky_comment: true

          # Optional: Customize review based on file types
          # direct_prompt: |
          #   Review this PR focusing on:
          #   - For TypeScript files: Type safety and proper interface usage
          #   - For API endpoints: Security, input validation, and error handling
          #   - For React components: Performance, accessibility, and best practices
          #   - For tests: Coverage, edge cases, and test quality

          # Optional: Different prompts for different authors
          # direct_prompt: |
          #   ${{ github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR' &&
          #   'Welcome! Please review this PR from a first-time contributor. Be encouraging and provide detailed explanations for any suggestions.' ||
          #   'Please provide a thorough code review focusing on our coding standards and best practices.' }}

          # Add specific tools for running tests or linting
          allowed_tools: "Bash(bun run test),Bash(bun run lint),Bash(bun run typecheck),Bash(bunx ultracite check),Bash(bun run build)"

          # Optional: Skip review for certain conditions
          if: |
            !contains(github.event.pull_request.title, '[skip-review]') &&
            !contains(github.event.pull_request.title, '[WIP]')
