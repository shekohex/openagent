{
  "id": "task-9",
  "title": "Provider key CRUD service",
  "description": "Implement CRUD for provider_keys using envelope encryption; enforce per-user uniqueness and track lastUsedAt.",
  "requirements": [
    "Operations: upsert({provider, key|managed}), list(), delete(provider), touch(provider)",
    "Uniqueness on (userId, provider)",
    "Do not return plaintext keys",
    "Use internal service identity for decrypt path when needed"
  ],
  "plan": [
    "Create Convex mutations/queries in convex/providerKeys.ts",
    "Integrate envelope.seal on upsert and store fields",
    "Implement list without sensitive fields; include createdAt, lastUsedAt",
    "Implement delete and touch with ownership checks"
  ],
  "expected_outcome": "Provider key operations working with encrypted storage.",
  "acceptance_criteria": [
    "Upsert creates or replaces user+provider entry",
    "List returns no ciphertext or plaintext",
    "Touch updates lastUsedAt"
  ],
  "deliverables": ["convex/providerKeys.ts + small unit tests"],
  "test_plan": [
    "bun test Convex functions with mocked envelope",
    "Integration test via API in task-10"
  ],
  "references": ["PLAN.md sections 4, 10"],
  "dependencies": ["task-2", "task-8"],
  "status": "pending"
}
