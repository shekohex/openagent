{
  "id": "task-16",
  "title": "Driver interface definition",
  "description": "Define provision/destroy/status interface for targets (local, docker) with types and error model.",
  "requirements": [
    "provision(spec) -> { instanceId, endpoint_internal, sidecarToken }",
    "destroy(instanceId) -> void",
    "status(instanceId) -> { state, endpoint_internal? }",
    "StartSpec includes: sessionID, volumePath, env, image (docker), command"
  ],
  "plan": [
    "Create TypeScript interfaces in shared package",
    "Define error codes: PROVISION_FAILED, TIMEOUT, NOT_FOUND",
    "Document contract and lifecycle in JSDoc"
  ],
  "expected_outcome": "Stable driver interface for implementations.",
  "acceptance_criteria": [
    "Both local and docker drivers implement the interface",
    "Types imported by orchestrator compile without casts"
  ],
  "deliverables": ["packages/shared/src/driver.ts"],
  "test_plan": [
    "Type-level tests (tsd) or compile checks",
    "Mock implementation unit test"
  ],
  "references": ["PLAN.md section 15"],
  "dependencies": ["task-11"],
  "status": "pending"
}
