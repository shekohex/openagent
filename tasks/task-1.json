{
  "id": "task-1",
  "title": "Convex schema: users, sessions, instances",
  "description": "Define Convex collections for users, sessions, and instances with required fields and indexes.",
  "context": {
    "collections": [
      "users: _id (Id<'users'>), email (unique), createdAt",
      "sessions: _id (Id<'sessions'> = opencode id), userId (Id<'users'>), title, status, currentInstanceId?, lastActivityAt, createdAt, updatedAt",
      "instances: _id (Id<'instances'>), sessionId (Id<'sessions'>), driver (docker|local), state (provisioning|running|terminated|error), endpointInternal, registeredAt, terminatedAt, sessionJsonPath"
    ]
  },
  "requirements": [
    "Use Convex defineSchema/defineTable in convex/schema.ts",
    "Enum columns via v.literal union: sessions.status {creating,active,idle,stopped,error}; instances.state {provisioning,running,terminated,error}",
    "References via v.id('users') and v.id('sessions')",
    "Indexes: sessions by userId+createdAt (desc in query), instances by sessionId",
    "Timestamps populated in mutations"
  ],
  "plan": [
    "Create convex/schema.ts with users, sessions, instances",
    "Export generated types",
    "Add indexes: sessions.by_user_created, instances.by_session"
  ],
  "expected_outcome": "Convex schema for core collections exists with indexes.",
  "acceptance_criteria": [
    "Type generation passes",
    "Sessions can be queried by userId ordered by createdAt",
    "Instances can be queried by sessionId",
    "Optional currentInstanceId relation is nullable"
  ],
  "deliverables": [
    "convex/schema.ts"
  ],
  "test_plan": [
    "Add a scratch mutation to insert/select a session",
    "Query sessions by userId and verify order"
  ],
  "references": [
    "PLAN.md section 4",
    "Convex schema docs"
  ],
  "dependencies": ["task-0"],
  "status": "pending"
}
